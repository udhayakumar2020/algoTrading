{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrayToDType = exports.elementToDType = exports.DType = undefined;\nvar _typeof2 = require('babel-runtime/helpers/typeof');\nvar _typeof3 = _interopRequireDefault(_typeof2);\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _createClass2 = require('babel-runtime/helpers/createClass');\nvar _createClass3 = _interopRequireDefault(_createClass2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar int = 'int';\nvar float = 'float';\nvar object = 'object';\nvar bool = 'bool';\nvar datetime = 'datetime';\nvar ALLOWED_DTYPES = [int, float, object, bool, datetime];\nvar DType = exports.DType = function () {\n  function DType(name) {\n    (0, _classCallCheck3.default)(this, DType);\n    if (ALLOWED_DTYPES.indexOf(name) < 0) throw new Error('dtype ' + name + ' not allowed');\n    this._name = name;\n  }\n  (0, _createClass3.default)(DType, [{\n    key: 'toString',\n    value: function toString() {\n      return 'dtype(' + this.dtype + ')';\n    }\n  }, {\n    key: 'dtype',\n    get: function get() {\n      return this._name;\n    }\n  }]);\n  return DType;\n}();\nvar elementToDType = exports.elementToDType = function elementToDType(el) {\n  var arrayDType = int;\n  if (typeof el === 'string') {\n    arrayDType = object;\n  } else if (!Number.isInteger(el) && typeof el === 'number') {\n    arrayDType = float;\n  } else if (typeof el === 'boolean') {\n    arrayDType = bool;\n  } else if (el instanceof Date) {\n    arrayDType = datetime;\n  } else if ((typeof el === 'undefined' ? 'undefined' : (0, _typeof3.default)(el)) === 'object') {\n    arrayDType = object;\n  }\n  return new DType(arrayDType);\n};\nvar arrayToDType = exports.arrayToDType = function arrayToDType(array) {\n  var arrayDType = void 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n  try {\n    for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var el = _step.value;\n      arrayDType = elementToDType(el);\n      if (arrayDType.dtype !== int && arrayDType.dtype !== float && arrayDType.dtype !== datetime) break;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n  return arrayDType;\n};","map":null,"metadata":{},"sourceType":"script"}